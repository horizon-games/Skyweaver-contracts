/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { FactoryMock } from "../FactoryMock";

export class FactoryMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _factoryManagerAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FactoryMock> {
    return super.deploy(
      _factoryManagerAddr,
      overrides || {}
    ) as Promise<FactoryMock>;
  }
  getDeployTransaction(
    _factoryManagerAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_factoryManagerAddr, overrides || {});
  }
  attach(address: string): FactoryMock {
    return super.attach(address) as FactoryMock;
  }
  connect(signer: Signer): FactoryMock__factory {
    return super.connect(signer) as FactoryMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FactoryMock {
    return new Contract(address, _abi, signerOrProvider) as FactoryMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryManagerAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "batchMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106373803806106378339818101604052602081101561003357600080fd5b50516000805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff00000000000000000000000000000000000000009092169190911790556105ad8061008a6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063731133e91461003b578063b48ab8b61461010c575b600080fd5b61010a6004803603608081101561005157600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135916040820135919081019060808101606082013564010000000081111561009557600080fd5b8201836020820111156100a757600080fd5b803590602001918460018302840111640100000000831117156100c957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102d7945050505050565b005b61010a6004803603608081101561012257600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561015a57600080fd5b82018360208201111561016c57600080fd5b8035906020019184602083028401116401000000008311171561018e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156101de57600080fd5b8201836020820111156101f057600080fd5b8035906020019184602083028401116401000000008311171561021257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561026257600080fd5b82018360208201111561027457600080fd5b8035906020019184600183028401116401000000008311171561029657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103f8945050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663731133e9858585856040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561038b578181015183820152602001610373565b50505050905090810190601f1680156103b85780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156103da57600080fd5b505af11580156103ee573d6000803e3d6000fd5b5050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b48ab8b6858585856040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156104ab578181015183820152602001610493565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156104ea5781810151838201526020016104d2565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561052657818101518382015260200161050e565b50505050905090810190601f1680156105535780820380516001836020036101000a031916815260200191505b50975050505050505050600060405180830381600087803b1580156103da57600080fdfea26469706673582212204f98a611e88e53b2f4afcde7cdc9d6fb80f71351c30179fa27cc6daf6c289bee64736f6c63430007040033";
